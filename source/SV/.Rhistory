fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
true_p - fitted_p
###  hestonCalibrator_wrapper.R  ###
rm(list = ls())
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
is.loaded('hestonCalibrator')
is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, -0.2, -0.3, -0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
###  hestonCalibrator_wrapper.R  ###
rm(list = ls())
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
is.loaded('hestonCalibrator')
is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, -0.2, -0.3, 0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
###  hestonCalibrator_wrapper.R  ###
rm(list = ls())
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
is.loaded('hestonCalibrator')
is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, 0.2, 0.3, -0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
###  hestonCalibrator_wrapper.R  ###
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
# is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, 0.2, 0.3, -0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
# dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
###  hestonCalibrator_wrapper.R  ###
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
# is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
# dim(newMat) <- c(nrow(p), ncol(p)) # -> 1.3x faster and noo need to extra memory
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
length(maturity)
n <- length(strike)
m <- length(hestonPar)
n!=length(maturity)
n!=length(prices)
prices=true_p
n!=length(prices)
n!=length(maturity) | n!=length(prices)
###  hestonCalibrator_wrapper.R  ###
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
# is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity) | n!=length(prices)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, 0.2, 0.3, -0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
# dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
###  hestonCalibrator_wrapper.R  ###
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
# is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity) | n!=length(prices)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, 0.2, 0.3, -0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
###  hestonCalibrator_wrapper.R  ###
dyn.load('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
# getLoadedDLLs()
# is.loaded('hestonCalibrator') & is.loaded('hestonPricer')
hestonPricer <- function(spot, rate, strike, maturity, hestonPar) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonPricer',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
par = as.double(hestonPar),
n = as.integer(n),
m = as.integer(m),
p = as.double(rep(0.0,n)))$p
return(prices)
}
hestonCalibrator <- function(spot, rate, strike, maturity, prices, guess) {
n <- length(strike)
m <- length(hestonPar)
# check dim
if(n!=length(maturity) | n!=length(prices)) stop('wrong dim')
if(length(hestonPar)!=5) warning(paste(m, 'parameter were specified'))
prices <- .C('hestonCalibrator',
S = as.double(spot),
r = as.double(rate),
K = as.double(strike),
mat = as.double(maturity),
p = as.double(prices),
par = as.double(guess),
n = as.integer(n),
m = as.integer(m))$p
return(prices)
}
###############
##           ##
##  EXAMPLE  ##
##           ##
###############
strike = c(
0.9371, 0.8603, 0.8112, 0.7760, 0.7470, 0.7216, 0.6699, 0.6137,
0.9956, 0.9868, 0.9728, 0.9588, 0.9464, 0.9358, 0.9175, 0.9025,
1.0427, 1.0463, 1.0499, 1.0530, 1.0562, 1.0593, 1.0663, 1.0766,
1.2287, 1.2399, 1.2485, 1.2659, 1.2646, 1.2715, 1.2859, 1.3046,
1.3939, 1.4102, 1.4291, 1.4456, 1.4603, 1.4736, 1.5005, 1.5328)
maturity = c(
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714, 1.07142857142857, 1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238,	0.357142857142857, 0.476190476190476, 0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143,
0.119047619047619, 0.238095238095238, 0.357142857142857, 0.476190476190476,	0.595238095238095, 0.714285714285714,	1.07142857142857,	1.42857142857143)
spot = 1.0
rate = 0.02
# simulate prices assuming a true model
hestonPar = c(3, 0.1, 0.25, -0.8, 0.08)
true_p <- hestonPricer(spot, rate, strike, maturity, hestonPar)
# calibrate
guess <- c(1.2, 0.2, 0.3, -0.6, 0.2)
fitted_p <- hestonCalibrator(spot, rate, strike, maturity, prices=true_p, guess)
dyn.unload('D:/Dropbox/Thesis/Code/hestonCalibrator/x64/Release/hestonCalibrator.dll')
spot <- data[[1]]$spot
load("./Rdata/data_list.RData")
spot <- data[[1]]$spot
load("./Rdata/data_list.RData")
load("../Rdata/data_list.RData")
load("./SV/Rdata/data_list.RData")
